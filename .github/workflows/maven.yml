# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven CI Pipeline

# Trigger the workflow on push or pull requests to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs that will run in the workflow
jobs:
  build:
    runs-on: ubuntu-latest

    # Steps to execute within the build job
    steps:
    # Step 1: Check out the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Java environment (specify the JDK version)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # Options: 'temurin', 'zulu', 'adopt', etc.
        cache: maven

    # Step 3: Set up Maven
    - name: Set up Maven
      run: mvn -B clean install --file pom.xml

    # Step 4: Run Tests
    - name: Run Unit Tests
      run: mvn test

    # Step 5: Generate a JAR (if build is successful)
    - name: Package Application
      run: mvn package

    # Optional Step: Upload the JAR as an artifact (if needed for deployment or further processing)
    - name: Upload JAR Artifact
      uses: actions/upload-artifact@v3
      with:
        name: SpringBootProjectDemo-jar
        path: target/*.jar

        
    - name: Build with Maven
      run: mvn clean install

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
